generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String @unique
  picture String
  role    Role   @default(USER)

  followingStores UserFollowingStore[] @relation("UserToFollowingStores")

  stores            Store[]           @relation("UserStores")
  reviews           Review[]          @relation("ReviewToUser")
  cart              Cart?             @relation("UserCart")
  shippingAddresses ShippingAddress[] @relation("UserShippingAddresses")
  orders            Order[]           @relation("UserOrders")
  wishlist          Wishlist[]        @relation("WishlistToUser")
  payments          PaymentDetails[]  @relation("PaymentDetailsToUser")
  coupons           Coupon[]          @relation("CouponToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[] @relation("CategoryToSubcategory")
  products      Product[]     @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String   @db.ObjectId
  category   Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  products Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                  String      @id @default(auto()) @map("_id") @db.ObjectId
  name                                String
  description                         String
  email                               String      @unique
  phone                               String
  url                                 String      @unique
  logo                                String
  cover                               String
  status                              StoreStatus @default(PENDING)
  averageRating                       Float       @default(0)
  numReviews                          Int         @default(0)
  featured                            Boolean     @default(false)
  returnPolicy                        String      @default("Return in 30 days.")
  defaultShippingService              String      @default("International Delivery")
  defaultShippingFeePerItem           Float       @default(0)
  defaultShippingFeeForAdditionalItem Float       @default(0)
  defaultShippingFeePerKg             Float       @default(0)
  defaultShippingFeeFixed             Float       @default(0)
  defaultDeliveryTimeMin              Int         @default(7)
  defaultDeliveryTimeMax              Int         @default(31)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation("UserStores", fields: [userId], references: [id])

  products      Product[]            @relation("StoreToProduct")
  shippingRates ShippingRate[]       @relation("StoreShippingRates")
  followers     UserFollowingStore[] @relation("StoreToFollowers")
  cartItems     CartItem[]           @relation("CartItemToStore")
  orderGroups   OrderGroup[]         @relation("OrderGroupToStore")
  coupons       Coupon[]             @relation("CouponToStore")

  @@index([userId])
}

model UserFollowingStore {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  storeId String @db.ObjectId

  user  User  @relation("UserToFollowingStores", fields: [userId], references: [id])
  store Store @relation("StoreToFollowers", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
}

enum ShippingFeeMethod {
  ITEM
  WEIGHT
  FIXED
}

model Product {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  description                 String
  slug                        String            @unique
  brand                       String
  rating                      Float             @default(0)
  sales                       Int               @default(0)
  numReviews                  Int               @default(0)
  shippingFeeMethod           ShippingFeeMethod @default(ITEM)
  views                       Int               @default(0)
  freeShipping                FreeShipping?     @relation("ProductFreeShipping")
  freeShippingForAllCountries Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String @db.ObjectId
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  variants  ProductVariant[] @relation("ProductToProductVariant")
  specs     Spec[]           @relation("ProductSpec")
  questions Question[]       @relation("ProductQuestion")
  reviews   Review[]         @relation("ReviewToProduct")
  wishlist  Wishlist[]       @relation("WishlistToProduct")

  categoryId    String      @db.ObjectId
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategoryId String      @db.ObjectId
  subCategory   SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  offerTagId String?   @db.ObjectId
  offerTag   OfferTag? @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  variantName        String
  variantDescription String?
  variantImage       String
  slug               String  @unique
  isSale             Boolean @default(false)
  saleEndDate        String?
  sku                String
  keywords           String
  sales              Int     @default(0)
  weight             Float

  productId String  @db.ObjectId
  product   Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes    Size[]                @relation("ProductVariantSizes")
  images   ProductVariantImage[] @relation("ProductVariantToVariantImage")
  colors   Color[]               @relation("ProductVariantColors")
  specs    Spec[]                @relation("ProductVariantSpec")
  wishlist Wishlist[]            @relation("WishlistToProductVariant")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]

  @@index([productId])
}

model Size {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  size     String
  quantity Int
  price    Float
  discount Float  @default(0)

  wishlist Wishlist[] @relation("WishlistToSize")

  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]

  @@index([productVariantId])
}

model ProductVariantImage {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  url   String
  alt   String @default("")
  order Int?

  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("ProductVariantToVariantImage", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model Color {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation("ProductVariantColors", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productVariantId])
}

model OfferTag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String @unique

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spec {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String
  value String
  type  String @default("general")

  productId        String?         @db.ObjectId
  product          Product?        @relation("ProductSpec", fields: [productId], references: [id])
  productVariantId String?         @db.ObjectId
  productVariant   ProductVariant? @relation("ProductVariantSpec", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([productVariantId])
}

model Question {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  answer     String?
  isAnswered Boolean @default(false)

  productId String  @db.ObjectId
  product   Product @relation("ProductQuestion", fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Country {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  code String @unique

  shippingRates         ShippingRate[]        @relation("CountryShippingRates")
  freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry_Country")
  shippingAddresses     ShippingAddress[]     @relation("CountryToShippingAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingRate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  countryId String?  @db.ObjectId
  Country   Country? @relation("CountryShippingRates", fields: [countryId], references: [id])

  pricePerItem Float
  pricePerKg   Float
  fixedPrice   Float
  method       ShippingFeeMethod @default(ITEM)

  storeId String @db.ObjectId
  store   Store  @relation("StoreShippingRates", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([countryId])
}

model FreeShipping {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  countries   String[]

  productId String  @unique @db.ObjectId
  product   Product @relation("ProductFreeShipping", fields: [productId], references: [id])

  freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry_FreeShipping")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FreeShippingCountry {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  freeShippingId String       @db.ObjectId
  freeShipping   FreeShipping @relation("FreeShippingToCountry_FreeShipping", fields: [freeShippingId], references: [id], onDelete: Cascade)

  countryId String  @db.ObjectId
  country   Country @relation("FreeShippingToCountry_Country", fields: [countryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([freeShippingId])
  @@index([countryId])
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Int
  comment String

  productId String  @db.ObjectId
  product   Product @relation("ReviewToProduct", fields: [productId], references: [id])

  userId String @db.ObjectId
  user   User   @relation("ReviewToUser", fields: [userId], references: [id])

  ReviewImage ReviewImage[] @relation("ReviewToReviewImage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model ReviewImage {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String
  alt String @default("")

  reviewId String @db.ObjectId
  review   Review @relation("ReviewToReviewImage", fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique @db.ObjectId
  user   User       @relation("UserCart", fields: [userId], references: [id])
  items  CartItem[] @relation("CartToCartItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int    @default(1)

  cartId String @db.ObjectId
  cart   Cart   @relation("CartToCartItem", fields: [cartId], references: [id])

  storeId String @db.ObjectId
  store   Store  @relation("CartItemToStore", fields: [storeId], references: [id])

  productVariantId String         @db.ObjectId
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  sizeId String? @db.ObjectId
  size   Size?   @relation(fields: [sizeId], references: [id])

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  OrderGroup   OrderGroup? @relation(fields: [orderGroupId], references: [id])
  orderGroupId String?     @db.ObjectId

  @@index([cartId])
  @@index([storeId])
  @@index([productVariantId])
}

model ShippingAddress {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String
  phone    String
  address  String
  city     String
  postal   String

  userId String @db.ObjectId
  user   User   @relation("UserShippingAddresses", fields: [userId], references: [id])

  countryId String?  @db.ObjectId
  Country   Country? @relation("CountryToShippingAddress", fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([countryId])
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  OutforDelivery
  Delivered
  Cancelled
  Failed
  Refunded
  Returned
  PartiallyShipped
  OnHold
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Declined
  Cancelled
  Refunded
  PartiallyRefunded
  Chargeback
}

enum PaymentMethod {
  Paypal
  Stripe
}

model Order {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount  Float
  status       String  @default("pending")
  trackingCode String?
  paymentId    String?

  userId String @db.ObjectId
  user   User   @relation("UserOrders", fields: [userId], references: [id])

  orderGroups OrderGroup[] @relation("OrderToOrderGroup")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderGroup {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storeId String @db.ObjectId
  store   Store  @relation("OrderGroupToStore", fields: [storeId], references: [id])

  orderId String @db.ObjectId
  order   Order  @relation("OrderToOrderGroup", fields: [orderId], references: [id])

  items OrderItem[] @relation("OrderItemToGroup")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]

  @@index([storeId])
  @@index([orderId])
}

enum ProductStatus {
  /// Product has been added to the order but no action taken yet
  Pending

  /// Product is being prepared (picked, packed, or manufactured)
  Processing

  /// Product is packed and ready for shipment
  ReadyForShipment

  /// Product has been shipped
  Shipped

  /// Product has been delivered to the customer
  Delivered

  /// Product order has been canceled
  Canceled

  /// Product has been returned by the customer
  Returned

  /// Product cost has been refunded
  Refunded

  /// Delivery attempt failed, product may return to warehouse
  FailedDelivery

  /// Product is on hold (e.g., stock issues, verification required)
  OnHold

  /// Product is delayed due to stock unavailability
  Backordered

  /// Some units of the product were shipped, but the order is not yet complete
  PartiallyShipped

  /// Customer requested an exchange for the product
  ExchangeRequested

  /// Product is awaiting customer pickup (for pickup orders)
  AwaitingPickup
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String @db.ObjectId
  variantId String @db.ObjectId
  sizeId    String @db.ObjectId

  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  price       Float
  totalPrice  Float

  orderGroupId String     @db.ObjectId
  orderGroup   OrderGroup @relation("OrderItemToGroup", fields: [orderGroupId], references: [id], onDelete: Cascade)

  status ProductStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderGroupId])
}

model Wishlist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation("WishlistToUser", fields: [userId], references: [id])

  productId String?  @db.ObjectId
  product   Product? @relation("WishlistToProduct", fields: [productId], references: [id])

  productVariantId String?         @db.ObjectId
  productVariant   ProductVariant? @relation("WishlistToProductVariant", fields: [productVariantId], references: [id])

  sizeId String? @db.ObjectId
  size   Size?   @relation("WishlistToSize", fields: [sizeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([productVariantId])
}

model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  description String?
  discount    Float
  expiryDate  DateTime

  userId String? @db.ObjectId
  user   User?   @relation("CouponToUser", fields: [userId], references: [id])

  storeId String? @db.ObjectId
  store   Store?  @relation("CouponToStore", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([storeId])
}

model PaymentDetails {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod String
  paymentStatus String  @default("unpaid")
  transactionId String?
  totalPaid     Float   @default(0)

  userId String @db.ObjectId
  user   User   @relation("PaymentDetailsToUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
